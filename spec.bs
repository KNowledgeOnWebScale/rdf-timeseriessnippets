<pre class="metadata">
Title: RDF Time Series Snippets
Warning: Not Ready
Shortname: RDF-TS-Snippets
Level: none
Status: LD
Repository: KNowledgeOnWebScale/rdf-timeseriessnippets
URL: https://knowledgeonwebscale.github.io/rdf-timeseriessnippets/
Editor: Dylan Van Assche, https://dylanvanassche.be/#me
Editor: Pieter Colpaert, https://pietercolpaert.be
Abstract: An RDF Time Series Snippet is a segment of data points from a time series dataset, typically used for analysis or visualization. The specification uses JSON to store the data points to allow re-usability of existing tooling for analyzing time series. The entity can then be used for annotating this snippet, which is a time interval subset of a potentially larger time series.
Markup Shorthands: markdown yes, css no
</pre>

# Introduction # {#intro}

Sensor observations, positioning data, measurements, mobility information... are commonly published as Time Series data with a timestamp and a value. 
Representing Time Series data in RDF drastically raises the verbosity, as each data point is often given its own identifier, for which contextual information is repeated on all data points.
With Time Series Snippets, we allow a data publisher to compact the data points in subsets of a Time Series, called the Snippet with JSON objects, allowing to re-use existing tooling for analyzing time series.
This way, you can greatly reduce the amount of triples when describing a Time Series.

Time Series Snippets use the following prefix and namespace:

```turtle
@prefix tss: <https://w3id.org/tss#>;
```

A first example illustrates the features of a `tss:Snippet`:

<div class="example" id="simple_example_snippet">
```turtle
<snippet/2026-01-01>
  a tss:Snippet;
  tss:points """[
    { "time": "2026-01-01T06:00:00Z", "value": "5.4", "id": "https://example.org/0"},
    { "time": "2026-01-01T06:59:59Z", "value": "5.2", "id": "https://example.org/1"},
    { "time": "2026-01-01T08:00:00Z", "value": "5.2", "id": "https://example.org/2"},
    { "time": "2026-01-01T09:00:00Z", "value": "6.1", "id": "https://example.org/3"},
  ]"""^^rdf:JSON;
  tss:from "2026-01-01T00:00:00Z"^^xsd:dateTime;
  tss:until "2026-01-02T00:00:00Z"^^xsd:dateTime;
  tss:pointType sosa:Observation;
  tss:context """{
    "@context":{
       "time": {
         "@id":"http://www.w3.org/ns/sosa/resultTime",
         "@type":"http://www.w3.org/2001/XMLSchema#dateTime"
     },
     "value": {
         "@id":"http://www.w3.org/ns/sosa/simpleValue",
         "@type":"http://www.w3.org/2001/XMLSchema#integer"
      },
     "id": "@id"
    }
  }"""^^rdf:JSON;
  tss:about [
    sosa:madeBySensor <temp_sensor_1>;
    sosa:observedProperty <temperature>;
  ];
.
```
</div>

The intention of Time Series [=Snippets=] is to be a lossless format as, if needed, it can be expanded again. 
Example 1 for example can be expanded to this RDF dataset:

<div class="example" id="simple_example_rdf">
```turtle
<https://example.org/0>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "5.4"^^xsd:double ;
  sosa:observedProperty <temperature> ;
  sosa:resultTime "2026-01-01T06:00:00Z"^^xsd:dateTime .

<https://example.org/1>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "5.2"^^xsd:double ;
  sosa:observedProperty <temperature> ;
  sosa:resultTime "2026-01-01T06:59:59Z"^^xsd:dateTime .

<https://example.org/2>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "5.2"^^xsd:double ;
  sosa:observedProperty <temperature> ;
  sosa:resultTime "2026-01-01T08:00:02Z"^^xsd:dateTime .

<https://example.org/3>
  a sosa:Observation ;
  sosa:madeBySensor <temp_sensor_1> ;
  sosa:hasSimpleResult "6.1"^^xsd:double ;
  sosa:observedProperty <temperature> ;
  sosa:resultTime "2026-01-01T09:00:00Z"^^xsd:dateTime .
```
</div>

# Definitions # {#definitions}

A <dfn>Time Series</dfn> is a set of data points ordered by timestamp, where each data point consists of a timestamp and corresponding value.

A <dfn>Snippet</dfn> describes a subset of a [=Time Series=] within a certain period defined by a start and end timestamp, and a description of the entity providing the data points.

A <dfn>Data Point</dfn> is a single point of a [=Time Series=] containing an ISO timestamp, a value with datatype, and optionally an identifier.

# Snippet properties # {#properties}

Each [=Snippet=] SHOULD have the following properties:

- `tss:points`: a JSON array (datatype `rdf:JSON`) of data points where each data point is a JSON object with a `time` key using `xsd:dateTime` value, with a `value` key for which the value is annotated with a datatype, and optionally an `id` key for which the value is an IRI for the current data point.
- `tss:from`: starting timestamp (including) of the period covered by `tss:points` using an `xsd:dateTime`.
- `tss:until`: until this timestamp (excluding) of the period covered by `tss:points` using an `xsd:dateTime`.
- `tss:about`: contains statements about a blank node. The statements can be asserted on top of all data points in `tss:points` when expanding the Snippet.
- `tss:pointType`: the RDF type of all data points in `tss:points`.
- `tss:context`: JSON-LD context describing the JSON array of `tss:points`.

Issue: Discuss whether these properties are required or optional. E.g., a publisher might decide to do a lossy conversion for their goal, and not include a JSON-LD context or pointType. However, we can still analyze and visualize the data without that information.

## Data Points ## {#points}

`tss:points` MUST be a JSON array with JSON objects (`rdf:JSON` as datatype).
Each [=Data Point=] itself MUST be a JSON object consisting of 2 required properties and 1 optional property:
  - `time`: the timestamp of the data point using an `xsd:dateTime`.
  - `value`: the value of the data point with corresponding datatype.
  - `id`: the data point identifier is optionally. When set, this MUST be a named node.

<div class="example" id="ex_points">
```turtle
"""[
    { "time": "2026-01-01T06:00:00Z", "value": "5.4", "id": "https://example.org/0" },
    { "time": "2026-01-01T06:59:59Z", "value": "5.2", "id": "https://example.org/1" },
    { "time": "2026-01-01T08:00:00Z", "value": "5.2", "id": "https://example.org/2" },
    { "time": "2026-01-01T09:00:00Z", "value": "6.1", "id": "https://example.org/3" },
]"""^^rdf:JSON;
```
</div>

## Expanding data points ## {#expanding}

When the optional JSON-LD context is provided through `tss:context`, a [=Snippet=] can be expanded to a verbose RDF representation, for example using its original vocabulary as defined in the JSON-LD specification to transform JSON-LD into RDF quads. The following default JSON-LD context is used if no context is specified:

```json
{
 "@context": {
    "id": "@id",
   "time": {
       "@id": "https://w3id.org/tss#time",
       "@type":"http://www.w3.org/2001/XMLSchema#dateTime"
    },
    "value": "https://w3id.org/tss#value" 
 } 
}
```
The properties `tss:about` and `tss:pointType` will influence that process.

For each [=Data Point=], it can be mapped as follows:
 1. When the `id` is set and it is a valid IRI, set this id as the subject. If it is not, create a new blank node and set this as the subject.
 2. When `tss:pointType` is set, create a triple stating this id is of `rdf:type` the object of the pointType triple.
 3. Create a triple for the time based on the JSON-LD context. For unknown intermediary named nodes, a blank node is to be created.
 4. Similarly, create a triple for the value based on the JSON-LD context.
 5. Now apply the `tss:about` blank node entity to this point.
